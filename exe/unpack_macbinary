#!/usr/bin/env ruby

require "fileutils"

include FileUtils

require "slop"

require "macbinary_unpack"

def which(cmd, path = ENV["PATH"])
  path.split(File::PATH_SEPARATOR).each do |p|
    begin
      pcmd = File.expand_path(cmd, p)
    rescue ArgumentError
      # File.expand_path will raise an ArgumentError if the path is malformed.
      # See https://github.com/Homebrew/homebrew/issues/32789
      next
    end
    return pcmd if File.file?(pcmd) && File.executable?(pcmd)
  end
  nil
end

def unpack macbinary
  output_files = MacBinary.unpack macbinary

  output = File.basename(macbinary, ".bin")

  # Data fork forms the basis of the output file.
  mv output_files[:data], output
  # Copy the resource fork into it
  begin
    MacBinary.add_resource_fork output, output_files[:rsrc]
  rescue
    # Remove the data fork if something goes wrong
    rm output
    raise
  ensure
    # Always make sure the temporary resource forks are cleaned up.
    rm [output_files[:info], output_files[:rsrc]]
  end
end

if self.to_s == "main"
  opts = Slop.parse do |o|
    o.on "-h", "--help", "Display this message" do
      puts o
    end
    o.on "-v", "--version", "Print the version" do
      puts MacBinary::VERSION
      exit
    end
  end

  if !which "macunpack"
    $stderr.puts "macunpack is not installed!"
    exit 1
  end

  if opts.arguments.empty?
    $stderr.puts "No files specified!"
    exit 1
  end

  missing_files = opts.arguments.select {|f| !File.exist? f}
  if !missing_files.empty?
    $stderr.puts "The following input files cannot be found: #{missing_files.join(" ")}"
    exit 1
  end

  success = true

  opts.arguments.each do |macbinary|
    puts "Processing #{macbinary}..."
    begin
      unpack macbinary
    rescue MacBinary::MacunpackException
      $stderr.puts "macunpack failed while processing file \"#{macbinary}\"!"
      success = false
    end
  end

  exit success ? 0 : 1
end
